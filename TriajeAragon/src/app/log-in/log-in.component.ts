import { Component, OnInit } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { NgForm } from '@angular/forms';
import { Router } from '@angular/router';
import { User } from '../models/user';
import { UserServiceService } from '../users-service.service';
import { Config } from '../utils/config';
import * as CryptoJS from "crypto-js"


@Component({
  selector: 'app-log-in',
  templateUrl: './log-in.component.html',
  styleUrls: ['./log-in.component.css']
})
export class LogInComponent implements OnInit {
  user : User;
  passwordInput: string;
  error: string = '';
  imagePath: any;



  constructor(private userServiceService: UserServiceService, private router: Router, private _sanitizer: DomSanitizer) {
    this.user = new User();
    this.imagePath = this._sanitizer.bypassSecurityTrustResourceUrl('data:image/png;base64,'
    + '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');

   }

  ngOnInit(): void {
  }

  logIn(loginForm: NgForm){

    if(!loginForm.valid){
      return;
    }else{
      this.checkUser();
    }
  }

  checkUser(){
    this.userServiceService.checkUser(this.user).subscribe(result =>{
      if(result.length > 0){
        if(this.checkPassword(result[0].password)){
          // Si existe ya esa variable la eliminamos y después la volvemos a crear
          if(localStorage.getItem('currentUser') !== null){
            localStorage.removeItem('currentUser');
          }
          localStorage.setItem('currentUser', JSON.stringify(result[0]));
        this.router.navigate(['/patients']);
        this.error = '';
        }else{
          this.error = 'Usuario o contraseña incorrectos. Por favor, revise sus datos e intentelo de nuevo.'
        }
      }else{ // Si el usuario no existe también debemos sacar el error.
        this.error = 'Usuario o contraseña incorrectos. Por favor, revise sus datos e intentelo de nuevo.'
      }
    });
  }

  checkPassword(passwordToCheck: string):boolean{
    let decryptedPassword = CryptoJS.AES.decrypt(passwordToCheck.trim(), Config.encryptKey.trim()).toString(CryptoJS.enc.Utf8);
    if(decryptedPassword === this.passwordInput){
      return true;
    }else{
      return false;
    }
  }

}
